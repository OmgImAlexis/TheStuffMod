// Date: 9/01/2015 7:09:47 PM
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX
package com.shnupbups.allthethings.model;

import net.minecraft.client.model.ModelBiped;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;
import net.minecraft.util.MathHelper;

public class ModelPirate extends ModelBiped {
	// fields
	ModelRenderer leftleg2;
	ModelRenderer hook1;
	ModelRenderer hook2;
	ModelRenderer hook3;
	ModelRenderer nose;
	ModelRenderer beard1;
	ModelRenderer beard2;
	ModelRenderer beard3;
	ModelRenderer hat1;
	ModelRenderer hat2;
	ModelRenderer hat3;
	ModelRenderer hat4;
	ModelRenderer hat5;
	ModelRenderer hat6;

	public ModelPirate() {
		textureWidth=64;
		textureHeight=64;
		bipedBody=new ModelRenderer(this,16,18);
		bipedBody.addBox(-4F,0F,-2F,8,12,4);
		bipedBody.setRotationPoint(0F,0F,0F);
		bipedBody.setTextureSize(64,64);
		bipedBody.mirror=true;
		setRotation(bipedBody,0F,0F,0F);
		bipedRightLeg=new ModelRenderer(this,0,30);
		bipedRightLeg.addBox(-2F,0F,-2F,4,12,4);
		bipedRightLeg.setRotationPoint(2F,12F,0F);
		bipedRightLeg.setTextureSize(64,64);
		bipedRightLeg.mirror=true;
		setRotation(bipedRightLeg,0F,0F,0F);
		bipedLeftLeg=new ModelRenderer(this,0,18);
		bipedLeftLeg.addBox(-1F,0F,0F,2,10,2);
		bipedLeftLeg.setRotationPoint(-2F,12F,-1F);
		bipedLeftLeg.setTextureSize(64,64);
		bipedLeftLeg.mirror=true;
		setRotation(bipedLeftLeg,0F,0F,0F);
		leftleg2=new ModelRenderer(this,0,46);
		leftleg2.addBox(-3F,10F,-1F,4,2,4);
		leftleg2.setRotationPoint(-2F,12F,-1F);
		leftleg2.setTextureSize(64,64);
		leftleg2.mirror=true;
		setRotation(leftleg2,0F,0F,0F);
		hook1=new ModelRenderer(this,8,18);
		hook1.addBox(2F,9F,0F,1,3,1);
		hook1.setRotationPoint(4F,0F,0F);
		hook1.setTextureSize(64,64);
		hook1.mirror=true;
		setRotation(hook1,0F,0F,0F);
		hook2=new ModelRenderer(this,8,25);
		hook2.addBox(1F,11F,0F,1,1,1);
		hook2.setRotationPoint(4F,0F,0F);
		hook2.setTextureSize(64,64);
		hook2.mirror=true;
		setRotation(hook2,0F,0F,0F);
		hook3=new ModelRenderer(this,8,22);
		hook3.addBox(1F,8F,0F,1,2,1);
		hook3.setRotationPoint(4F,0F,0F);
		hook3.setTextureSize(64,64);
		hook3.mirror=true;
		setRotation(hook3,0F,0F,0F);
		bipedRightArm=new ModelRenderer(this,40,18);
		bipedRightArm.addBox(-4F,0F,-2F,4,12,4);
		bipedRightArm.setRotationPoint(-4F,0F,0F);
		bipedRightArm.setTextureSize(64,64);
		bipedRightArm.mirror=true;
		setRotation(bipedRightArm,0F,0F,0F);
		bipedLeftArm=new ModelRenderer(this,32,2);
		bipedLeftArm.addBox(0F,0F,-2F,4,8,4);
		bipedLeftArm.setRotationPoint(4F,0F,0F);
		bipedLeftArm.setTextureSize(64,64);
		bipedLeftArm.mirror=true;
		setRotation(bipedLeftArm,0F,0F,0F);
		bipedHead=new ModelRenderer(this,0,0);
		bipedHead.addBox(-4F,-10F,-4F,8,10,8);
		bipedHead.setRotationPoint(0F,0F,0F);
		bipedHead.setTextureSize(64,64);
		bipedHead.mirror=true;
		setRotation(bipedHead,0F,0F,0F);
		nose=new ModelRenderer(this,24,0);
		nose.addBox(-1F,-3F,-6F,2,4,2);
		nose.setRotationPoint(0F,0F,0F);
		nose.setTextureSize(64,64);
		nose.mirror=true;
		setRotation(nose,0F,0F,0F);
		beard1=new ModelRenderer(this,32,0);
		beard1.addBox(-3F,0F,-4F,6,1,1);
		beard1.setRotationPoint(0F,0F,0F);
		beard1.setTextureSize(64,64);
		beard1.mirror=true;
		setRotation(beard1,0F,0F,0F);
		beard2=new ModelRenderer(this,32,0);
		beard2.addBox(-2F,1F,-4F,4,1,1);
		beard2.setRotationPoint(0F,0F,0F);
		beard2.setTextureSize(64,64);
		beard2.mirror=true;
		setRotation(beard2,0F,0F,0F);
		beard3=new ModelRenderer(this,32,0);
		beard3.addBox(-1F,2F,-4F,2,1,1);
		beard3.setRotationPoint(0F,0F,0F);
		beard3.setTextureSize(64,64);
		beard3.mirror=true;
		setRotation(beard3,0F,0F,0F);
		hat1=new ModelRenderer(this,16,34);
		hat1.addBox(-6F,-12F,-2F,12,2,4);
		hat1.setRotationPoint(0F,0F,0F);
		hat1.setTextureSize(64,64);
		hat1.mirror=true;
		setRotation(hat1,0F,0F,0F);
		hat2=new ModelRenderer(this,0,52);
		hat2.addBox(-5F,-13F,-1F,10,1,2);
		hat2.setRotationPoint(0F,0F,0F);
		hat2.setTextureSize(64,64);
		hat2.mirror=true;
		setRotation(hat2,0F,0F,0F);
		hat3=new ModelRenderer(this,0,55);
		hat3.addBox(-4F,-14F,-1F,8,1,2);
		hat3.setRotationPoint(0F,0F,0F);
		hat3.setTextureSize(64,64);
		hat3.mirror=true;
		setRotation(hat3,0F,0F,0F);
		hat4=new ModelRenderer(this,0,58);
		hat4.addBox(-3F,-15F,-1F,6,1,2);
		hat4.setRotationPoint(0F,0F,0F);
		hat4.setTextureSize(64,64);
		hat4.mirror=true;
		setRotation(hat4,0F,0F,0F);
		hat5=new ModelRenderer(this,0,61);
		hat5.addBox(-2F,-16F,-1F,4,1,2);
		hat5.setRotationPoint(0F,0F,0F);
		hat5.setTextureSize(64,64);
		hat5.mirror=true;
		setRotation(hat5,0F,0F,0F);
		hat6=new ModelRenderer(this,12,18);
		hat6.addBox(-1F,-17F,-1F,2,1,2);
		hat6.setRotationPoint(0F,0F,0F);
		hat6.setTextureSize(64,64);
		hat6.mirror=true;
		setRotation(hat6,0F,0F,0F);
	}

	public void render(Entity entity,float f,float f1,float f2,float f3,float f4,float f5) {
		setRotationAngles(f,f1,f2,f3,f4,f5,entity);
		bipedBody.render(f5);
		bipedRightLeg.render(f5);
		bipedLeftLeg.render(f5);
		leftleg2.render(f5);
		hook1.render(f5);
		hook2.render(f5);
		hook3.render(f5);
		bipedRightArm.render(f5);
		bipedLeftArm.render(f5);
		bipedHead.render(f5);
		nose.render(f5);
		beard1.render(f5);
		beard2.render(f5);
		beard3.render(f5);
		hat1.render(f5);
		hat2.render(f5);
		hat3.render(f5);
		hat4.render(f5);
		hat5.render(f5);
		hat6.render(f5);
	}

	private void setRotation(ModelRenderer model,float x,float y,float z) {
		model.rotateAngleX=x;
		model.rotateAngleY=y;
		model.rotateAngleZ=z;
	}

	public void setRotationAngles(float f,float f1,float f2,float f3,float f4,float f5,Entity entity) {
		float f6=(180F/(float)Math.PI);
		this.bipedHead.rotateAngleX=f4/(180F/(float)Math.PI);
		this.bipedHead.rotateAngleY=f3/(180F/(float)Math.PI);
		this.hat1.rotateAngleX=bipedHead.rotateAngleX;
		this.hat1.rotateAngleY=bipedHead.rotateAngleY;
		this.hat2.rotateAngleX=bipedHead.rotateAngleX;
		this.hat2.rotateAngleY=bipedHead.rotateAngleY;
		this.hat3.rotateAngleX=bipedHead.rotateAngleX;
		this.hat3.rotateAngleY=bipedHead.rotateAngleY;
		this.hat4.rotateAngleX=bipedHead.rotateAngleX;
		this.hat4.rotateAngleY=bipedHead.rotateAngleY;
		this.hat5.rotateAngleX=bipedHead.rotateAngleX;
		this.hat5.rotateAngleY=bipedHead.rotateAngleY;
		this.hat6.rotateAngleX=bipedHead.rotateAngleX;
		this.hat6.rotateAngleY=bipedHead.rotateAngleY;
		this.nose.rotateAngleX=bipedHead.rotateAngleX;
		this.nose.rotateAngleY=bipedHead.rotateAngleY;
		this.beard1.rotateAngleX=bipedHead.rotateAngleX;
		this.beard1.rotateAngleY=bipedHead.rotateAngleY;
		this.beard2.rotateAngleX=bipedHead.rotateAngleX;
		this.beard2.rotateAngleY=bipedHead.rotateAngleY;
		this.beard3.rotateAngleX=bipedHead.rotateAngleX;
		this.beard3.rotateAngleY=bipedHead.rotateAngleY;
		this.bipedBody.rotateAngleX=((float)Math.PI*2F);
		this.bipedLeftArm.rotateAngleX=((float)Math.PI*2F);
		this.hook1.rotateAngleX=bipedLeftArm.rotateAngleX;
		this.hook2.rotateAngleX=bipedLeftArm.rotateAngleX;
		this.hook3.rotateAngleX=bipedLeftArm.rotateAngleX;
		this.bipedRightArm.rotateAngleX=((float)Math.PI*2F);
		this.bipedBody.rotateAngleX=((float)Math.PI*2F);
		this.bipedRightLeg.rotateAngleX=MathHelper.cos(f*0.6662F+(float)Math.PI)*1.4F*f1;
		this.bipedLeftLeg.rotateAngleX=MathHelper.cos(f*0.6662F)*1.4F*f1;
		this.leftleg2.rotateAngleX=bipedLeftLeg.rotateAngleX;
		this.bipedRightArm.rotateAngleX=MathHelper.cos(f*0.6662F+(float)Math.PI)*2.0F*f1*0.5F;
		this.bipedLeftArm.rotateAngleX=MathHelper.cos(f*0.6662F)*2.0F*f1*0.5F;
		this.hook1.rotateAngleX=MathHelper.cos(f*0.6662F)*2.0F*f1*0.5F;
		this.hook2.rotateAngleX=MathHelper.cos(f*0.6662F)*2.0F*f1*0.5F;
		this.hook3.rotateAngleX=MathHelper.cos(f*0.6662F)*2.0F*f1*0.5F;
		this.bipedRightArm.rotateAngleZ=0.0F;
		this.bipedLeftArm.rotateAngleZ=0.0F;
		this.hook1.rotateAngleZ=0.0F;
		this.hook2.rotateAngleZ=0.0F;
		this.hook3.rotateAngleZ=0.0F;
		if(this.isRiding) {
			this.bipedRightArm.rotateAngleX+=-((float)Math.PI/5F);
			this.bipedLeftArm.rotateAngleX+=-((float)Math.PI/5F);
			this.hook1.rotateAngleX+=-((float)Math.PI/5F);
			this.hook2.rotateAngleX+=-((float)Math.PI/5F);
			this.hook3.rotateAngleX+=-((float)Math.PI/5F);
			this.hook1.rotateAngleX+=-((float)Math.PI/5F);
			this.hook2.rotateAngleX+=-((float)Math.PI/5F);
			this.hook3.rotateAngleX+=-((float)Math.PI/5F);
			this.bipedLeftLeg.rotateAngleX=-((float)Math.PI*2F/5F);
			this.leftleg2.rotateAngleX=-((float)Math.PI*2F/5F);
			this.bipedRightLeg.rotateAngleX=-((float)Math.PI*2F/5F);
			this.bipedLeftLeg.rotateAngleY=((float)Math.PI/10F);
			this.leftleg2.rotateAngleY=((float)Math.PI/10F);
			this.bipedRightLeg.rotateAngleY=-((float)Math.PI/10F);
		}
		this.bipedRightArm.rotateAngleY=0.0F;
		this.bipedLeftArm.rotateAngleY=0.0F;
		this.hook1.rotateAngleY=0.0F;
		this.hook2.rotateAngleY=0.0F;
		this.hook3.rotateAngleY=0.0F;
		float f7;
		float f8;
		if(this.onGround>-9990.0F) {
			f7=this.onGround;
			this.bipedBody.rotateAngleY=MathHelper.sin(MathHelper.sqrt_float(f7)*(float)Math.PI*2.0F)*0.2F;
			this.bipedRightArm.rotateAngleY+=this.bipedBody.rotateAngleY;
			this.bipedLeftArm.rotateAngleY+=this.bipedBody.rotateAngleY;
			this.bipedLeftArm.rotateAngleX+=this.bipedBody.rotateAngleY;
			this.hook1.rotateAngleY+=this.bipedBody.rotateAngleY;
			this.hook1.rotateAngleX+=this.bipedBody.rotateAngleY;
			this.hook2.rotateAngleY+=this.bipedBody.rotateAngleY;
			this.hook2.rotateAngleX+=this.bipedBody.rotateAngleY;
			this.hook3.rotateAngleY+=this.bipedBody.rotateAngleY;
			this.hook3.rotateAngleX+=this.bipedBody.rotateAngleY;
			f7=1.0F-this.onGround;
			f7*=f7;
			f7*=f7;
			f7=1.0F-f7;
			f8=MathHelper.sin(f7*(float)Math.PI);
			float f9=MathHelper.sin(this.onGround*(float)Math.PI)*-(this.bipedHead.rotateAngleX-0.7F)*0.75F;
			this.bipedRightArm.rotateAngleX=(float)((double)this.bipedRightArm.rotateAngleX-((double)f8*1.2D+(double)f9));
			this.bipedRightArm.rotateAngleY+=this.bipedBody.rotateAngleY*2.0F;
			this.bipedRightArm.rotateAngleZ=MathHelper.sin(this.onGround*(float)Math.PI)*-0.4F;
		}
		this.bipedRightArm.rotateAngleZ+=MathHelper.cos(f2*0.09F)*0.05F+0.05F;
		this.bipedLeftArm.rotateAngleZ-=MathHelper.cos(f2*0.09F)*0.05F+0.05F;
		this.hook1.rotateAngleZ-=MathHelper.cos(f2*0.09F)*0.05F+0.05F;
		this.hook2.rotateAngleZ-=MathHelper.cos(f2*0.09F)*0.05F+0.05F;
		this.hook3.rotateAngleZ-=MathHelper.cos(f2*0.09F)*0.05F+0.05F;
		this.bipedRightArm.rotateAngleX+=MathHelper.sin(f2*0.067F)*0.05F;
		this.bipedLeftArm.rotateAngleX-=MathHelper.sin(f2*0.067F)*0.05F;
		this.hook1.rotateAngleX-=MathHelper.sin(f2*0.067F)*0.05F;
		this.hook2.rotateAngleX-=MathHelper.sin(f2*0.067F)*0.05F;
		this.hook3.rotateAngleX-=MathHelper.sin(f2*0.067F)*0.05F;
	}
}
